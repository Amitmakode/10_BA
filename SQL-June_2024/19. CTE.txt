create database cte ;

use cte ;

-- Create a simple table
CREATE TABLE Employees (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DepartmentID INT
);

-- Insert some sample data
INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentID)
VALUES (1, 'John', 'Doe', 1),
       (2, 'Jane', 'Smith', 2),
       (3, 'Michael', 'Johnson', 1),
       (4, 'Emily', 'Davis', 2);
       
       
-- Using CTE to query the Employees table

WITH DepartmentCTE AS (
    SELECT DepartmentID, COUNT(*) AS NumEmployees
    FROM Employees
    GROUP BY DepartmentID
)
SELECT DepartmentID, NumEmployees
FROM DepartmentCTE;


-- recursive

-- Recursive CTE to calculate factorial

WITH RECURSIVE FactorialCTE (n, factorial) AS (
    -- Anchor member
    SELECT 1 AS n, 1 AS factorial
    UNION ALL
    -- Recursive member
    SELECT n + 1, (n + 1) * factorial
    FROM FactorialCTE
    WHERE n < 10 -- Limiting to 10 factorial for demo
)
SELECT n, factorial
FROM FactorialCTE ;


-- Using CTE with JOIN

WITH EmployeeDetails AS (
    SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName
    FROM Employees e
    JOIN Departments d ON e.DepartmentID = d.DepartmentID
)
SELECT *
FROM EmployeeDetails ;



CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);


INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES (1, 'HR'),
       (2, 'IT'),
       (3, 'Finance'); 

-- Using CTE with DELETE

WITH EmployeesToDelete AS (
    SELECT EmployeeID
    FROM Employees
    WHERE DepartmentID = 2
)
DELETE FROM Employees
WHERE EmployeeID IN (SELECT EmployeeID FROM EmployeesToDelete);


set sql_safe_updates = 0 ;


-- Create a temporary table with sample data

CREATE TEMPORARY TABLE TempDepartments (
    DepartmentID INT,
    DepartmentName VARCHAR(50)
);

INSERT INTO TempDepartments (DepartmentID, DepartmentName)
VALUES (1, 'HR'),
       (2, 'IT'),
       (3, 'Finance');
       
select * from   TempDepartments ; 


-- Use the temporary table in your query

WITH EmployeeDetails AS (
    SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName
    FROM Employees e
    JOIN TempDepartments d ON e.DepartmentID = d.DepartmentID
)
SELECT *
FROM EmployeeDetails;    


--------------------------------------------
-- Create a simple table
CREATE TABLE Sales (
    SalesID INT,
    ProductID INT,
    Amount DECIMAL(10, 2)
);

-- Insert some sample data
INSERT INTO Sales (SalesID, ProductID, Amount)
VALUES (1, 101, 150.00),
       (2, 102, 200.00),
       (3, 101, 100.00),
       (4, 103, 50.00);
       
       
-- Using CTE to calculate total sales amount per product

WITH TotalSalesPerProduct AS (
    SELECT ProductID, SUM(Amount) AS TotalAmount
    FROM Sales
    GROUP BY ProductID
)
SELECT *
FROM TotalSalesPerProduct;



-- Using CTE with JOIN and filtering

WITH HighValueProducts AS (
    SELECT p.ProductID, p.ProductName, s.TotalAmount
    FROM Products p
    JOIN (
        SELECT ProductID, SUM(Amount) AS TotalAmount
        FROM Sales
        GROUP BY ProductID
    ) s ON p.ProductID = s.ProductID
    WHERE s.TotalAmount > 20
)
SELECT *
FROM HighValueProducts;

-- Create Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    CategoryID INT,
    Price DECIMAL(10, 2)
);

-- Insert sample data into Products table
INSERT INTO Products (ProductID, ProductName, CategoryID, Price)
VALUES (1, 'iPhone 12', 5, 799.99),
       (2, 'Samsung Galaxy S21', 5, 749.99),
       (3, 'iPad Air', 6, 599.99),
       (4, 'MacBook Pro', 7, 1499.99),
       (5, 'HP Spectre x360', 8, 1299.99),
       (6, 'Bose QuietComfort 45', 9, 299.99),
       (7, 'Anker PowerPort Atom', 10, 29.99);
       
       
---------------------------------------------------------

create table course(
course_name varchar(50) ,
course_id int(10) , 
course_title varchar(60),
corse_desc varchar(60),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_lauch_year int);


insert into course values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('aiops' , 102 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 104 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 105 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 107 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 108 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 109 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 110 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 112 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 113 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 114 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 116 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 117 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019),
('Dl' , 118 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022);

#CTE common table expession

select * from course where course_id in (101,102,106, 112, 116, 110, 108, 107);

with sample_students as (
select * from course where course_id in (101,102,106, 112, 116, 110, 108, 107))
select * from sample_students where course_name = 'Machine_learning';

select c.course_id , c.course_name , s.salesid, s.productid
from course c
cross  join sales s;

with outcoume_corss as 
(select c.course_id , c.course_name , c.course_desc ,s.student_id,s.student_name ,s.student_course_id 
from course c
cross  join student s ) 
select course_id , course_name ,student_id from outcoume_corss where student_id = 301;


select 1 as col1, 2 as col2; 

select 1 as col1, 2 as col2 
union all
select 5, 4;

with ctetest as (select 1 as col1, 2 as col2 
union all
select 3, 4)
select col1 from ctetest;


with recursive cte(n) as 
(select 1 union all select n+1 from cte where n<50)
select * from cte;


select 1 as n, 2 as p, -1 as q;

with recursive cte as (select 1 as n, 2 as p, -1 as q
union all 
select n+1, p+2, q+4 from cte where n<20)
select * from cte;



with recursive cte as (select 1 as n, 2 as p, -1 as q
union all 
select n+1, p*2, q+4 from cte where n<50)
select * from cte;


WITH RECURSIVE age_cte AS (
    SELECT 1 AS id
    FROM dual -- Assuming 'dual' is a table available in your database, otherwise, replace it with any other suitable table
    UNION ALL
    SELECT id + 1
    FROM age_cte
    WHERE id < 13824 -- Adjust this condition as per your requirement
)
SELECT * FROM age_cte;


------------------------------------------------------------------------

1  - 100 - super affordable product 
100 -300 - affordable 
300 - 600 - moderate price 
600 + - expensive 

1- 5 - toddler 
5 - 10 - kids
10 - 18 - tenagers
18 - 30 - young
30 - 60 - man
60 -70 - senior citizen 
70 + - super senior


DELIMITER &&
create function mark_sales(a int) 
returns varchar(30)
DETERMINISTIC
begin 
declare b varchar(30); 
if a  <= 100  then 
	set b = "super affordable product" ;
elseif a > 100 and a < 300 then 
	set b = "affordable" ;
elseif a >300 and a < 600 then 
	set b = "moderate price" ;
else 
	set b = "expensive" ;
end if ;
return b;
end &&

select * from sales ;

select amount, mark_sales(amount) from sales ;

-------------------------------------

use practice ;

delimiter &&
create function age_cat1(a int)
returns int
Deterministic
Begin
declare b int;
if a <=5 then
	set b = 0-5;
elseif a > 5 and a < 10 then
	set b = 5-9;
elseif a >= 10 and a < 18 then
	set b = 10-17;
elseif a >=18 and a < 30 then
	set b = 18-29;
elseif a >= 30 and a < 60 then
	set b = 30-59;
else
	set b = 60-100;
end if;
return b;
END &&


select age, age_cat1(age) from bank ;


delimiter &&
create function age_cat(a int)
returns varchar(20)
Deterministic
Begin
declare b varchar(20);
if a <=5 then
	set b = "0-5";
elseif a > 5 and a < 10 then
	set b = "5-9";
elseif a >= 10 and a < 18 then
	set b = "10-17";
elseif a >=18 and a < 30 then
	set b = "18-29";
elseif a >= 30 and a < 60 then
	set b = "30-59";
else
	set b = "60-100";
end if;
return b;
END &&


select age, age_cat(age) from bank ;



